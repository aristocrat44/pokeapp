import React,{Component} from 'react';
import Pokecard from '../../pokecard/pokecard';
import axios from 'axios';
import loadingGIF from '../../../img/loading_gangar.gif';
import NavigationBar from '../../nav/navbar';
import './pokedex.css';
import {actionGetPokemons} from '../action';
import {connect} from 'react-redux';
import { bindActionCreators } from 'redux';
import InfiniteScroll from 'react-infinite-scroll-component';
import {Spinner, InputGroup, FormControl} from 'react-bootstrap';

class Pokedex extends Component{

    constructor(props) {
        super(props);
        this.state={
            // poke_api:"https://pokeapi.co/api/v2/pokemon?limit=20", //964 max
            pokemon:this.props.pokemons, // for poke api pokemon data return 
            searchField:'',
            next:'', // for calling next api for infinite scroll
            hasMore: true, // for checking if next api exists or not
            items: Array.from({ length: 20 }) // for length of pokemon data
        };
   
    }

     componentDidMount(){
        //const res = await axios.get(this.state.poke_api);    
         this.props.actions.actionGetPokemons();
         console.log(this.state.pokemons)
         //this.setState({pokemon:this.props.pokemons});
       
    //    this.setState({pokemon: res.data.results});
    //     this.setState({next:res.data.next});
    }


    // for calling next 20 pokemon data and adding next 20 data of pokemon to present data
    fetchMoreData = async () => {
        const res = await axios.get(this.state.next);
            if(res.data.next){  
                this.setState({next:res.data.next, hasMore:true});
            }else{
                this.setState({hasMore: false});
            }
       
        setTimeout(() => {
            this.setState({
                //concating data count 
                items: this.state.items.concat(Array.from({ length: 20 }))
              });
        }, 100);
            // adding merging present pokemon data with next incoming data for infinite scroll
        this.setState({pokemon: (this.state.pokemon).concat(res.data.results)});
      };

      onSearch = (val) => {
        this.setState({searchField: val});
      }


    render(){
        if(this.props.pokemons){
        const searchField = this.state.searchField;
        const pokemon = this.props.pokemons;
        var filteredPokemons = pokemon.filter((p) =>
        p.name.toLowerCase().includes(searchField.toLowerCase()));  
        }
        return (
            <React.Fragment>
                 <InfiniteScroll
                    dataLength={this.state.items.length}
                    next={this.fetchMoreData}
                    hasMore={this.state.hasMore}
                    loader={ 
                    <div style={{minWidth:"50px"}}>
                        <Spinner animation="border"/>
                        <Spinner animation="border" style={{float:"right"}}/>
                    </div>
                    }                    
                    endMessage={
                        <p>
                        <b>Yay! You have seen it all brah. Gotta cath'em all !</b>
                        </p>
                    }>
            {this.state.pokemon ? (
                <div className="pokedex">
                <div><NavigationBar/></div>
                <div className='searchbox'>
                    {/* <input type="text"  placeholder="search by name" /> */}
                    <InputGroup className="mb-3">
                        <InputGroup.Prepend>
                        <InputGroup.Text id="inputGroup-sizing-default">Search</InputGroup.Text>
                        </InputGroup.Prepend>
                        <FormControl
                            onChange={(e) => this.onSearch(e.target.value)}
                        />
                    </InputGroup>
                </div>
                        <div className="pokedex-cards">
                        {filteredPokemons.map((p)=>(
                            <Pokecard key={p.name} name={p.name} url={p.url}/>
                        ))}
                    
                    </div>
                </div>
            ) : (<img src={loadingGIF} alt="" className='loading'/>) }

</InfiniteScroll>
            </React.Fragment>
        )
    }
}

const mapStateToProps = (state) => {
     console.log('hereee',state.pokemon_reducer.pokemon_data.count);
    return {
      pokemons: state.pokemon_reducer.pokemon_data.results,
      nextAPI: state.pokemon_reducer.pokemon_data.next
    };
  
  };
  
  function mapDispatchtoProps(dispatch) {
    return {
      actions: bindActionCreators(
        {
         actionGetPokemons
        },
        dispatch
      )
    };
  }

  
export default connect(mapStateToProps, mapDispatchtoProps)(Pokedex);

